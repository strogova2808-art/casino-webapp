const fetch = require('node-fetch');

// In-memory database
const users = new Map();

// Telegram bot tokens
const BOT_TOKENS = {
    'main': '8373706621:AAFTOCrsNuSuov9pBzj1C1xk7vvC3zo01Nk',
    'proxy': '7662090078:AAEGodkX0D982ZQplWqKHafGlucATOzzevc',
    'admin_notifications': '7662090078:AAEGodkX0D982ZQplWqKHafGlucATOzzevc'
};

const ADMIN_CHAT_ID = 1376689155;
const SUPPORT_CHAT_ID = '@luditot_support';

// Free Lootbox Settings
let freeLootboxEnabled = false;
let lootboxPrizes = [];
let lootboxSpinCooldown = 10; // seconds
let lootboxLastSpin = new Map();

// Miner Game Settings
const minerMultipliers = {
    1: 2,
    2: 3, 
    3: 4
};

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
async function sendTelegramMessage(chatId, message, botToken = BOT_TOKENS.admin_notifications) {
    try {
        const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: chatId,
                text: message,
                parse_mode: 'HTML'
            })
        });
        
        const result = await response.json();
        console.log('üì® –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', result.ok);
        return result.ok;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–æ–≤
async function clearAllChats(botToken) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (—á–∞—Ç–æ–≤)
        const updatesUrl = `https://api.telegram.org/bot${botToken}/getUpdates`;
        const updatesResponse = await fetch(updatesUrl);
        const updatesData = await updatesResponse.json();
        
        if (!updatesData.ok) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤');
            return false;
        }
        
        const chats = new Set();
        
        // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ chat_id
        updatesData.result.forEach(update => {
            const chatId = update.message?.chat.id || update.callback_query?.message?.chat.id;
            if (chatId && chatId !== ADMIN_CHAT_ID) {
                chats.add(chatId);
            }
        });
        
        console.log(`üóëÔ∏è –ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏: ${chats.size}`);
        
        // –û—á–∏—â–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞—Ç
        for (let chatId of chats) {
            try {
                const leaveUrl = `https://api.telegram.org/bot${botToken}/leaveChat`;
                await fetch(leaveUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        chat_id: chatId
                    })
                });
                console.log(`‚úÖ –û—á–∏—â–µ–Ω —á–∞—Ç: ${chatId}`);
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
                await new Promise(resolve => setTimeout(resolve, 100));
            } catch (error) {
                console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç ${chatId}:`, error.message);
            }
        }
        
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–æ–≤:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async function broadcastMessage(message, botToken) {
    try {
        const userList = Array.from(users.values());
        let successCount = 0;
        let failCount = 0;
        
        console.log(`üì¢ –ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è ${userList.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        
        for (let user of userList) {
            try {
                const sent = await sendTelegramMessage(user.user_id, message, botToken);
                if (sent) {
                    successCount++;
                } else {
                    failCount++;
                }
                
                // –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
                await new Promise(resolve => setTimeout(resolve, 50));
            } catch (error) {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}:`, error.message);
                failCount++;
            }
        }
        
        return {
            success: true,
            total: userList.length,
            success_count: successCount,
            fail_count: failCount
        };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞ Crypto Bot
async function createCryptoBotInvoice(amount, userId) {
    try {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Crypto Bot API
        // –≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        const invoiceData = {
            amount: amount,
            currency: 'USD',
            user_id: userId,
            description: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ CASINO Totki`,
            payload: JSON.stringify({
                user_id: userId,
                amount: amount,
                type: 'deposit'
            })
        };
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Crypto Bot API)
        const invoiceUrl = `https://t.me/CryptoBot?start=invoice_${Date.now()}_${userId}_${amount}`;
        
        return {
            success: true,
            invoice_url: invoiceUrl,
            invoice_id: `invoice_${Date.now()}_${userId}`
        };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

exports.handler = async (event, context) => {
    console.log('üé∞ Casino Function called');
    
    // CORS headers
    const headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization, x-requested-with',
        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
        'Access-Control-Max-Age': '86400',
        'Content-Type': 'application/json'
    };

    // Handle OPTIONS preflight
    if (event.httpMethod === 'OPTIONS') {
        return { statusCode: 200, headers, body: '' };
    }

    // Handle GET requests
    if (event.httpMethod === 'GET') {
        return {
            statusCode: 200,
            headers,
            body: JSON.stringify({
                success: true,
                message: 'üé∞ Casino API is working!',
                server: 'Netlify Functions',
                timestamp: new Date().toISOString(),
                total_users: users.size,
                free_lootbox_enabled: freeLootboxEnabled,
                lootbox_prizes_remaining: lootboxPrizes.length
            })
        };
    }

    // Handle POST requests
    if (event.httpMethod === 'POST') {
        try {
            const data = JSON.parse(event.body || '{}');
            console.log('üì• POST Request data:', data);

            const action = data.action;
            const userId = data.user_id || 'default';
            const botType = data.bot_type || 'main';
            const username = data.username || 'user_' + userId;
            const firstName = data.first_name || '–ò–≥—Ä–æ–∫';

            // Initialize user if not exists - –ù–ï –î–û–ë–ê–í–õ–Ø–ï–ú –ë–ê–õ–ê–ù–° –ü–†–ò –ö–ê–ñ–î–û–ú –ó–ê–ü–†–û–°–ï
            if (!users.has(userId)) {
                users.set(userId, {
                    user_id: userId,
                    username: username,
                    first_name: firstName,
                    balance: 0, // –ù–ê–ß–ê–õ–¨–ù–´–ô –ë–ê–õ–ê–ù–° 0
                    games_played: 0,
                    total_won: 0,
                    biggest_win: 0,
                    wins_count: 0,
                    created_at: new Date().toISOString(),
                    last_activity: new Date().toISOString(),
                    inventory: [],
                    free_spins_used: 0,
                    miner_games_played: 0,
                    miner_total_won: 0
                });
                console.log(`‚úÖ Created new user: ${userId}`);
            }

            const user = users.get(userId);
            user.last_activity = new Date().toISOString();
            
            let result = { success: true };

            // Process actions
            switch (action) {
                case 'register_telegram_user':
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
                    if (users.has(userId)) {
                        console.log(`üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ`);
                    } else {
                        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–∞–ª–∞–Ω—Å–æ–º 0
                        const newUser = {
                            user_id: userId,
                            username: data.username,
                            first_name: data.first_name,
                            balance: 0, // –ù–ê–ß–ê–õ–¨–ù–´–ô –ë–ê–õ–ê–ù–° 0
                            games_played: 0,
                            total_won: 0,
                            biggest_win: 0,
                            wins_count: 0,
                            created_at: new Date().toISOString(),
                            last_activity: new Date().toISOString(),
                            inventory: [],
                            free_spins_used: 0,
                            miner_games_played: 0,
                            miner_total_won: 0
                        };
                        users.set(userId, newUser);
                        console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${userId}`);
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if (data.photo_url) user.photo_url = data.photo_url;
                    if (data.language_code) user.language_code = data.language_code;
                    if (data.is_premium !== undefined) user.is_premium = data.is_premium;
                    
                    user.last_activity = new Date().toISOString();
                    
                    result.user_data = user;
                    result.message = 'Telegram user processed successfully';
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Ç–æ–ª—å–∫–æ –¥–ª—è –ù–û–í–´–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    if (!users.has(userId) && userId != ADMIN_CHAT_ID) {
                        await sendTelegramMessage(
                            ADMIN_CHAT_ID,
                            `üë§ <b>–ù–û–í–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø</b>\n\n` +
                            `üÜî ID: <code>${userId}</code>\n` +
                            `üìõ Username: @${data.username || '–Ω–µ—Ç'}\n` +
                            `üë®‚Äçüíº –ò–º—è: ${data.first_name}\n` +
                            `üíé –ë–∞–ª–∞–Ω—Å: 0 ‚≠ê\n` +
                            `ü§ñ –ë–æ—Ç: ${botType}\n` +
                            `üïê –í—Ä–µ–º—è: ${new Date().toLocaleString()}`,
                            BOT_TOKENS.admin_notifications
                        );
                    }
                    break;

                case 'get_initial_data':
                    result.user_data = user;
                    result.game_history = [];
                    result.server = 'Netlify Functions';
                    result.free_lootbox_enabled = freeLootboxEnabled;
                    result.lootbox_prizes_remaining = lootboxPrizes.length;
                    result.lootbox_cooldown = lootboxSpinCooldown;
                    break;

                case 'update_balance':
                    if (data.balance !== undefined) {
                        user.balance = data.balance;
                        result.user_data = user;
                    }
                    break;

                case 'game_result_silent':
                    user.games_played++;
                    
                    if (data.win) {
                        user.wins_count++;
                        user.total_won += data.prize_value || 0;
                        user.biggest_win = Math.max(user.biggest_win, data.prize_value || 0);
                        
                        console.log(`üéâ User ${userId} won: ${data.prize_name} (${data.prize_value} ‚≠ê)`);
                    } else {
                        console.log(`‚ùå User ${userId} lost bet: ${data.bet_amount} ‚≠ê`);
                    }
                    
                    result.user_data = user;
                    break;

                case 'create_invoice':
                    const depositAmount = data.amount || 0;
                    
                    if (depositAmount <= 0) {
                        result.success = false;
                        result.error = '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è';
                        break;
                    }
                    
                    console.log(`üí∞ Create invoice request from ${userId}: ${depositAmount} USD`);
                    
                    const invoiceResult = await createCryptoBotInvoice(depositAmount, userId);
                    
                    if (invoiceResult.success) {
                        result.invoice_url = invoiceResult.invoice_url;
                        result.invoice_id = invoiceResult.invoice_id;
                        result.amount = depositAmount;
                        result.message = 'Invoice created successfully';
                    } else {
                        result.success = false;
                        result.error = invoiceResult.error;
                    }
                    break;

                case 'confirm_deposit':
                    const confirmedAmount = data.amount || 0;
                    const starsAmount = data.stars || 0;
                    
                    console.log(`üí∞ Deposit confirmed for ${userId}: ${confirmedAmount} USD -> ${starsAmount} ‚≠ê`);
                    
                    const oldBalance = user.balance;
                    user.balance += starsAmount;
                    
                    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –ø–æ–ø–æ–ª–Ω–µ–Ω: ${oldBalance} -> ${user.balance} ‚≠ê`);
                    
                    result.user_data = user;
                    result.deposit_amount = confirmedAmount;
                    result.stars_added = starsAmount;
                    result.old_balance = oldBalance;
                    result.new_balance = user.balance;
                    
                    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
                    await sendTelegramMessage(
                        ADMIN_CHAT_ID,
                        `üí∞ <b>–ë–ê–õ–ê–ù–° –ü–û–ü–û–õ–ù–ï–ù</b>\n\n` +
                        `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${user.first_name}\n` +
                        `üÜî <b>ID:</b> <code>${userId}</code>\n` +
                        `üìõ <b>Username:</b> @${user.username || '–Ω–µ—Ç'}\n` +
                        `üíµ <b>–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> ${confirmedAmount} USD\n` +
                        `üíé <b>–î–æ–±–∞–≤–ª–µ–Ω–æ –∑–≤–µ–∑–¥:</b> ${starsAmount} ‚≠ê\n` +
                        `üìä <b>–ë—ã–ª–æ:</b> ${oldBalance} ‚≠ê\n` +
                        `üîÑ <b>–°—Ç–∞–ª–æ:</b> ${user.balance} ‚≠ê\n` +
                        `ü§ñ <b>–ë–æ—Ç:</b> ${botType}`,
                        BOT_TOKENS.admin_notifications
                    );
                    
                    break;

                case 'free_lootbox_spin':
                    if (!freeLootboxEnabled) {
                        result.success = false;
                        result.error = '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ª—É–¥–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞';
                        break;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
                    const lastSpin = lootboxLastSpin.get(userId);
                    const now = Date.now();
                    if (lastSpin && (now - lastSpin) < (lootboxSpinCooldown * 1000)) {
                        const remaining = Math.ceil((lootboxSpinCooldown * 1000 - (now - lastSpin)) / 1000);
                        result.success = false;
                        result.error = `–ü–æ–¥–æ–∂–¥–∏—Ç–µ ${remaining} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏`;
                        break;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –ø—Ä–∏–∑—ã
                    if (lootboxPrizes.length === 0) {
                        result.success = false;
                        result.error = '–í—Å–µ –ø—Ä–∏–∑—ã —Ä–∞–∑—ã–≥—Ä–∞–Ω—ã';
                        freeLootboxEnabled = false;
                        break;
                    }

                    // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ª—É–¥–∫–∏
                    const symbols = ['lemon', 'cherry', 'bar', 'seven'];
                    const spinResult = [
                        symbols[Math.floor(Math.random() * symbols.length)],
                        symbols[Math.floor(Math.random() * symbols.length)],
                        symbols[Math.floor(Math.random() * symbols.length)]
                    ];

                    result.spin_result = spinResult;
                    result.win = false;
                    result.prize = null;

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à (—Ç—Ä–∏ —Å–µ–º–µ—Ä–∫–∏)
                    if (spinResult.every(symbol => symbol === 'seven')) {
                        // –í—ã–¥–∞–µ–º –ø—Ä–∏–∑
                        const prize = lootboxPrizes.shift();
                        result.win = true;
                        result.prize = prize;

                        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user.balance += prize.value;
                        if (!user.inventory) user.inventory = [];
                        user.inventory.push(prize);

                        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                        await sendTelegramMessage(
                            ADMIN_CHAT_ID,
                            `üé∞ <b>–í–´–ò–ì–†–´–® –í –ë–ï–°–ü–õ–ê–¢–ù–û–ô –õ–£–î–ö–ï!</b>\n\n` +
                            `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${user.first_name}\n` +
                            `üÜî <b>ID:</b> <code>${userId}</code>\n` +
                            `üìõ <b>Username:</b> @${user.username || '–Ω–µ—Ç'}\n` +
                            `üéÅ <b>–ü—Ä–∏–∑:</b> ${prize.name}\n` +
                            `üíé <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${prize.value} ‚≠ê\n` +
                            `üìä <b>–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–∑–æ–≤:</b> ${lootboxPrizes.length}\n` +
                            `üïê <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString()}`,
                            BOT_TOKENS.admin_notifications
                        );

                        // –ï—Å–ª–∏ –ø—Ä–∏–∑—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å - –∑–∞–∫—Ä—ã–≤–∞–µ–º –ª—É–¥–∫—É
                        if (lootboxPrizes.length === 0) {
                            freeLootboxEnabled = false;
                            await sendTelegramMessage(
                                ADMIN_CHAT_ID,
                                `üîí <b>–ë–ï–°–ü–õ–ê–¢–ù–ê–Ø –õ–£–î–ö–ê –ó–ê–ö–†–´–¢–ê</b>\n\n` +
                                `üìä <b>–ü—Ä–∏—á–∏–Ω–∞:</b> –í—Å–µ –ø—Ä–∏–∑—ã —Ä–∞–∑—ã–≥—Ä–∞–Ω—ã\n` +
                                `üéÅ <b>–í—Å–µ–≥–æ –ø—Ä–∏–∑–æ–≤:</b> ${lootboxPrizes.length}\n` +
                                `üïê <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString()}`,
                                BOT_TOKENS.admin_notifications
                            );
                        }
                    }

                    lootboxLastSpin.set(userId, now);
                    user.free_spins_used = (user.free_spins_used || 0) + 1;
                    result.user_data = user;
                    result.prizes_remaining = lootboxPrizes.length;
                    break;

                case 'miner_game':
                    const bombCount = data.bomb_count || 1;
                    const betAmount = data.bet_amount || 0;
                    
                    if (betAmount <= 0) {
                        result.success = false;
                        result.error = '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏';
                        break;
                    }
                    
                    if (user.balance < betAmount) {
                        result.success = false;
                        result.error = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥';
                        break;
                    }
                    
                    // –°–∏–º—É–ª—è—Ü–∏—è –∏–≥—Ä—ã –≤ –º–∏–Ω—ë—Ä–∞
                    const totalCells = 9;
                    const bombPositions = [];
                    
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –±–æ–º–±
                    while (bombPositions.length < bombCount) {
                        const pos = Math.floor(Math.random() * totalCells);
                        if (!bombPositions.includes(pos)) {
                            bombPositions.push(pos);
                        }
                    }
                    
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç" –∫–ª–µ—Ç–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ)
                    // –ó–¥–µ—Å—å —Å–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    const openedCell = Math.floor(Math.random() * totalCells);
                    const isBomb = bombPositions.includes(openedCell);
                    
                    user.balance -= betAmount;
                    user.miner_games_played = (user.miner_games_played || 0) + 1;
                    
                    if (!isBomb) {
                        const multiplier = minerMultipliers[bombCount];
                        const winAmount = betAmount * multiplier;
                        
                        user.balance += winAmount;
                        user.miner_total_won = (user.miner_total_won || 0) + winAmount;
                        
                        result.win = true;
                        result.win_amount = winAmount;
                        result.multiplier = multiplier;
                        result.message = `üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${winAmount} ‚≠ê (x${multiplier})!`;
                    } else {
                        result.win = false;
                        result.message = 'üí• –í—ã –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ –±–æ–º–±—É!';
                    }
                    
                    result.user_data = user;
                    result.bomb_positions = bombPositions;
                    result.opened_cell = openedCell;
                    break;

                case 'withdraw_prize':
                    const prizeName = data.prize;
                    const prizeValue = data.value;
                    
                    console.log(`üéÅ Withdraw request from ${userId}: ${prizeName} (${prizeValue} ‚≠ê)`);
                    
                    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –≤—ã–≤–æ–¥–µ –ø—Ä–∏–∑–∞
                    await sendTelegramMessage(
                        ADMIN_CHAT_ID,
                        `üéÅ <b>–ó–ê–ü–†–û–° –ù–ê –í–´–í–û–î –ü–†–ò–ó–ê</b>\n\n` +
                        `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${user.first_name}\n` +
                        `üÜî <b>ID:</b> <code>${userId}</code>\n` +
                        `üìõ <b>Username:</b> @${user.username || '–Ω–µ—Ç'}\n` +
                        `üèÜ <b>–ü—Ä–∏–∑:</b> ${prizeName}\n` +
                        `üíé <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${prizeValue} ‚≠ê\n` +
                        `ü§ñ <b>–ë–æ—Ç:</b> ${botType}`,
                        BOT_TOKENS.admin_notifications
                    );
                    
                    break;

                case 'nft_purchase':
                    console.log(`üñºÔ∏è NFT purchase from ${userId}: ${data.nft_name} for ${data.price} ‚≠ê`);
                    
                    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –ø–æ–∫—É–ø–∫–µ NFT
                    await sendTelegramMessage(
                        ADMIN_CHAT_ID,
                        `üñºÔ∏è <b>–ü–û–ö–£–ü–ö–ê NFT</b>\n\n` +
                        `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${user.first_name}\n` +
                        `üÜî <b>ID:</b> <code>${userId}</code>\n` +
                        `üìõ <b>Username:</b> @${user.username || '–Ω–µ—Ç'}\n` +
                        `üé® <b>NFT:</b> ${data.nft_name}\n` +
                        `üíé <b>–¶–µ–Ω–∞:</b> ${data.price} ‚≠ê\n` +
                        `ü§ñ <b>–ë–æ—Ç:</b> ${botType}`,
                        BOT_TOKENS.admin_notifications
                    );
                    break;

                // –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´
                case 'admin_set_lootbox':
                    if (data.admin_id != ADMIN_CHAT_ID) {
                        return {
                            statusCode: 403,
                            headers,
                            body: JSON.stringify({ 
                                success: false, 
                                error: 'Admin access required' 
                            })
                        };
                    }

                    freeLootboxEnabled = data.enabled || false;
                    lootboxPrizes = data.prizes || [];
                    lootboxSpinCooldown = data.cooldown || 10;
                    
                    result.free_lootbox_enabled = freeLootboxEnabled;
                    result.lootbox_prizes = lootboxPrizes;
                    result.lootbox_cooldown = lootboxSpinCooldown;
                    result.message = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª—É–¥–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã';
                    
                    await sendTelegramMessage(
                        ADMIN_CHAT_ID,
                        `üé∞ <b>–ù–ê–°–¢–†–û–ô–ö–ò –õ–£–î–ö–ò –û–ë–ù–û–í–õ–ï–ù–´</b>\n\n` +
                        `üîì <b>–°—Ç–∞—Ç—É—Å:</b> ${freeLootboxEnabled ? '–û–¢–ö–†–´–¢–ê' : '–ó–ê–ö–†–´–¢–ê'}\n` +
                        `üéÅ <b>–ü—Ä–∏–∑–æ–≤:</b> ${lootboxPrizes.length}\n` +
                        `‚è∞ <b>–ö—É–ª–¥–∞—É–Ω:</b> ${lootboxSpinCooldown} —Å–µ–∫\n` +
                        `üïê <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString()}`,
                        BOT_TOKENS.admin_notifications
                    );
                    break;

                case 'list_users':
                    console.log('üìã –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç –∞–¥–º–∏–Ω–∞');
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    if (data.admin_id != ADMIN_CHAT_ID) {
                        return {
                            statusCode: 403,
                            headers,
                            body: JSON.stringify({ 
                                success: false, 
                                error: 'Admin access required' 
                            })
                        };
                    }

                    try {
                        console.log(`üìä –¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø–∞–º—è—Ç–∏:`, Array.from(users.keys()));
                        
                        if (users.size === 0) {
                            result.users = {};
                            result.user_count = 0;
                            result.total_balance = 0;
                            result.message = '–í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π';
                        } else {
                            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Map –≤ –æ–±—ä–µ–∫—Ç
                            const usersArray = Array.from(users.entries()).reduce((acc, [id, userData]) => {
                                acc[id] = userData;
                                return acc;
                            }, {});
                            
                            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${Object.keys(usersArray).length}`);
                            
                            result.users = usersArray;
                            result.user_count = users.size;
                            result.total_balance = Array.from(users.values()).reduce((sum, user) => sum + (user.balance || 0), 0);
                            result.message = `–ù–∞–π–¥–µ–Ω–æ ${users.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`;
                        }
                        
                        result.timestamp = new Date().toISOString();
                        
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
                        result.success = false;
                        result.error = error.message;
                    }
                    break;

                case 'broadcast':
                    console.log('üì¢ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç –∞–¥–º–∏–Ω–∞');
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    if (data.admin_id != ADMIN_CHAT_ID) {
                        return {
                            statusCode: 403,
                            headers,
                            body: JSON.stringify({ 
                                success: false, 
                                error: 'Admin access required' 
                            })
                        };
                    }

                    try {
                        const message = data.message;
                        if (!message) {
                            result.success = false;
                            result.error = 'Message is required';
                        } else {
                            const broadcastResult = await broadcastMessage(message, BOT_TOKENS[botType] || BOT_TOKENS.main);
                            result.broadcast_result = broadcastResult;
                            
                            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ —Ä–∞—Å—Å—ã–ª–∫–µ
                            await sendTelegramMessage(
                                ADMIN_CHAT_ID,
                                `üì¢ <b>–†–ê–°–°–´–õ–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê</b>\n\n` +
                                `‚úâÔ∏è <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${message}\n` +
                                `üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> ${broadcastResult.total}\n` +
                                `‚úÖ <b>–£—Å–ø–µ—à–Ω–æ:</b> ${broadcastResult.success_count}\n` +
                                `‚ùå <b>–û—à–∏–±–æ–∫:</b> ${broadcastResult.fail_count}\n` +
                                `ü§ñ <b>–ë–æ—Ç:</b> ${botType}`,
                                BOT_TOKENS.admin_notifications
                            );
                        }
                        
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
                        result.success = false;
                        result.error = error.message;
                    }
                    break;

                case 'clear_chats':
                    console.log('üóëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É —á–∞—Ç–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∞');
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    if (data.admin_id != ADMIN_CHAT_ID) {
                        return {
                            statusCode: 403,
                            headers,
                            body: JSON.stringify({ 
                                success: false, 
                                error: 'Admin access required' 
                            })
                        };
                    }

                    try {
                        const clearResult = await clearAllChats(BOT_TOKENS[botType] || BOT_TOKENS.main);
                        result.clear_result = clearResult;
                        
                        if (clearResult) {
                            result.message = '–ß–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã';
                            
                            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ–± –æ—á–∏—Å—Ç–∫–µ
                            await sendTelegramMessage(
                                ADMIN_CHAT_ID,
                                `üóëÔ∏è <b>–ß–ê–¢–´ –û–ß–ò–©–ï–ù–´</b>\n\n` +
                                `ü§ñ <b>–ë–æ—Ç:</b> ${botType}\n` +
                                `‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –£—Å–ø–µ—à–Ω–æ\n` +
                                `üïê <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString()}`,
                                BOT_TOKENS.admin_notifications
                            );
                        } else {
                            result.message = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–æ–≤';
                        }
                        
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–æ–≤:', error);
                        result.success = false;
                        result.error = error.message;
                    }
                    break;

                case 'add_stars':
                    console.log('‚≠ê –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–≤–µ–∑–¥ –æ—Ç –∞–¥–º–∏–Ω–∞:', data);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    if (data.admin_id != ADMIN_CHAT_ID) {
                        return {
                            statusCode: 403,
                            headers,
                            body: JSON.stringify({ 
                                success: false, 
                                error: 'Admin access required' 
                            })
                        };
                    }

                    const targetUserId = data.target_user_id;
                    const starsToAdd = data.amount || 0;
                    
                    if (!users.has(targetUserId)) {
                        result.success = false;
                        result.error = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω';
                    } else if (starsToAdd <= 0) {
                        result.success = false;
                        result.error = '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è';
                    } else {
                        const targetUser = users.get(targetUserId);
                        const oldUserBalance = targetUser.balance;
                        targetUser.balance += starsToAdd;
                        
                        result.success = true;
                        result.message = `–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${starsToAdd} ‚≠ê`;
                        result.user_data = targetUser;
                        result.old_balance = oldUserBalance;
                        result.new_balance = targetUser.balance;
                        
                        console.log(`‚úÖ –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–∏–ª ${starsToAdd} ‚≠ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}`);
                        
                        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
                        await sendTelegramMessage(
                            ADMIN_CHAT_ID,
                            `‚≠ê <b>–ê–î–ú–ò–ù –î–û–ë–ê–í–ò–õ –ó–í–ï–ó–î–´</b>\n\n` +
                            `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${targetUser.first_name}\n` +
                            `üÜî <b>ID:</b> <code>${targetUserId}</code>\n` +
                            `üìõ <b>Username:</b> @${targetUser.username || '–Ω–µ—Ç'}\n` +
                            `üíé <b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b> ${starsToAdd} ‚≠ê\n` +
                            `üìä <b>–ë—ã–ª–æ:</b> ${oldUserBalance} ‚≠ê\n` +
                            `üîÑ <b>–°—Ç–∞–ª–æ:</b> ${targetUser.balance} ‚≠ê\n` +
                            `üë®‚Äçüíº <b>–í—ã–ø–æ–ª–Ω–∏–ª:</b> –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä`,
                            BOT_TOKENS.admin_notifications
                        );
                    }
                    break;

                case 'delete_user':
                    console.log('üóëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data.user_id);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    if (data.admin_id != ADMIN_CHAT_ID) {
                        return {
                            statusCode: 403,
                            headers,
                            body: JSON.stringify({ 
                                success: false, 
                                error: 'Admin access required' 
                            })
                        };
                    }

                    try {
                        const userIdToDelete = data.user_id.toString();
                        
                        if (!users.has(userIdToDelete)) {
                            result.success = false;
                            result.error = 'User not found';
                        } else {
                            const deletedUser = users.get(userIdToDelete);
                            users.delete(userIdToDelete);
                            
                            result.success = true;
                            result.message = `User ${userIdToDelete} deleted successfully`;
                            result.deleted_user = {
                                user_id: userIdToDelete,
                                username: deletedUser.username,
                                first_name: deletedUser.first_name,
                                deleted_at: new Date().toISOString()
                            };
                            
                            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userIdToDelete} —É–¥–∞–ª–µ–Ω`);
                            
                            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
                            await sendTelegramMessage(
                                ADMIN_CHAT_ID,
                                `üóëÔ∏è <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –£–î–ê–õ–ï–ù</b>\n\n` +
                                `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${deletedUser.first_name}\n` +
                                `üÜî <b>ID:</b> <code>${userIdToDelete}</code>\n` +
                                `üìõ <b>Username:</b> @${deletedUser.username || '–Ω–µ—Ç'}\n` +
                                `üíé <b>–ë–∞–ª–∞–Ω—Å –±—ã–ª:</b> ${deletedUser.balance} ‚≠ê\n` +
                                `üïê <b>–£–¥–∞–ª–µ–Ω:</b> ${new Date().toLocaleString()}`,
                                BOT_TOKENS.admin_notifications
                            );
                        }
                        
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
                        result.success = false;
                        result.error = error.message;
                    }
                    break;

                case 'clear_all_users':
                    console.log('‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    if (data.admin_id != ADMIN_CHAT_ID) {
                        return {
                            statusCode: 403,
                            headers,
                            body: JSON.stringify({ 
                                success: false, 
                                error: 'Admin access required' 
                            })
                        };
                    }

                    if (!data.confirm) {
                        result.success = false;
                        result.error = 'Confirmation required. Use confirm: true';
                    } else {
                        try {
                            const userCount = users.size;
                            const totalBalance = Array.from(users.values()).reduce((sum, user) => sum + (user.balance || 0), 0);
                            
                            // –û—á–∏—â–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                            users.clear();
                            
                            result.success = true;
                            result.message = `All users cleared successfully`;
                            result.cleared_count = userCount;
                            result.total_balance_cleared = totalBalance;
                            result.cleared_at = new Date().toISOString();
                            
                            console.log(`‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã (${userCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)`);
                            
                            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ–± –æ—á–∏—Å—Ç–∫–µ
                            await sendTelegramMessage(
                                ADMIN_CHAT_ID,
                                `‚ö†Ô∏è <b>–ë–ê–ó–ê –î–ê–ù–ù–´–• –û–ß–ò–©–ï–ù–ê</b>\n\n` +
                                `üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> ${userCount}\n` +
                                `üí∞ <b>–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:</b> ${totalBalance} ‚≠ê\n` +
                                `üïê <b>–í—Ä–µ–º—è –æ—á–∏—Å—Ç–∫–∏:</b> ${new Date().toLocaleString()}\n` +
                                `üîß <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ —á–µ—Ä–µ–∑:</b> ${botType}`,
                                BOT_TOKENS.admin_notifications
                            );
                            
                        } catch (error) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
                            result.success = false;
                            result.error = error.message;
                        }
                    }
                    break;

                case 'test_connection':
                    result.message = 'Connection test successful';
                    result.server = 'Netlify Functions';
                    result.timestamp = new Date().toISOString();
                    result.total_users = users.size;
                    result.free_lootbox_enabled = freeLootboxEnabled;
                    result.lootbox_prizes_remaining = lootboxPrizes.length;
                    break;

                default:
                    result.message = `Action '${action}' processed`;
            }

            console.log('üì§ Response:', result);
            return { statusCode: 200, headers, body: JSON.stringify(result) };

        } catch (error) {
            console.error('‚ùå Handler error:', error);
            
            return {
                statusCode: 200,
                headers,
                body: JSON.stringify({
                    success: false,
                    error: error.message,
                    timestamp: new Date().toISOString()
                })
            };
        }
    }

    return {
        statusCode: 405,
        headers,
        body: JSON.stringify({
            success: false,
            error: 'Method not allowed'
        })
    };
};