const TelegramBot = require('node-telegram-bot-api');
const fetch = require('node-fetch');

const token = 'YOUR_BOT_TOKEN';
const bot = new TelegramBot(token, { polling: true });

const ADMIN_CHAT_ID = 1376689155;
const NETLIFY_URL = 'https://teal-lollipop-dfedaf.netlify.app/.netlify/functions/casino';

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    
    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        await saveChatInfo(chatId, msg.message_id);
        
        const welcomeMessage = `
üéÅ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NFT Marketplace!</b>

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
üëâ <a href="https://teal-lollipop-dfedaf.netlify.app">–û—Ç–∫—Ä—ã—Ç—å –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å</a>

<b>–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã:</b>
/listusers - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/broadcast [—Å–æ–æ–±—â–µ–Ω–∏–µ] - –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
/clearchats - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã

<b>–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>
–ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ Telegram!
        `;
        
        await bot.sendMessage(chatId, welcomeMessage, { 
            parse_mode: 'HTML',
            disable_web_page_preview: true 
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start:', error);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /listusers
bot.onText(/\/listusers/, async (msg) => {
    const chatId = msg.chat.id;
    
    if (chatId != ADMIN_CHAT_ID) {
        await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
        return;
    }

    try {
        const response = await fetch(NETLIFY_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                action: 'list_users',
                admin_id: chatId
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            if (data.user_count === 0) {
                await bot.sendMessage(chatId, 'üìù –í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            } else {
                let message = `üìä <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n`;
                message += `üë• –í—Å–µ–≥–æ: ${data.user_count}\n`;
                message += `ü§ñ Telegram: ${data.total_telegram_users || 0}\n`;
                message += `üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${data.total_balance} ‚≠ê\n\n`;
                
                let counter = 1;
                Object.entries(data.users).forEach(([userId, user]) => {
                    if (counter <= 20) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
                        message += `üë§ <b>${user.first_name}</b>\n`;
                        message += `üÜî ID: <code>${userId}</code>\n`;
                        message += `üìõ @${user.username || '–Ω–µ—Ç'}\n`;
                        message += `üíé –ë–∞–ª–∞–Ω—Å: ${user.balance} ‚≠ê\n`;
                        message += `üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(user.registered_at).toLocaleDateString()}\n`;
                        message += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
                        counter++;
                    }
                });
                
                if (data.user_count > 20) {
                    message += `\n... –∏ –µ—â–µ ${data.user_count - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`;
                }
                
                await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
            }
        } else {
            await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${data.error}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /broadcast
bot.onText(/\/broadcast (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    
    if (chatId != ADMIN_CHAT_ID) {
        await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
        return;
    }

    const message = match[1];

    try {
        const response = await fetch(NETLIFY_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                action: 'broadcast_message',
                admin_id: chatId,
                message: message
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            await bot.sendMessage(chatId, 
                `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n` +
                `‚úÖ –£—Å–ø–µ—à–Ω–æ: ${data.broadcast_result.sent}\n` +
                `‚ùå –û—à–∏–±–æ–∫: ${data.broadcast_result.failed}`
            );
        } else {
            await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${data.error}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /clearchats
bot.onText(/\/clearchats/, async (msg) => {
    const chatId = msg.chat.id;
    
    if (chatId != ADMIN_CHAT_ID) {
        await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
        return;
    }

    try {
        const response = await fetch(NETLIFY_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                action: 'clear_chats',
                admin_id: chatId
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            await bot.sendMessage(chatId, 
                `‚úÖ –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n` +
                `üóëÔ∏è –û—á–∏—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${data.cleared_count}`
            );
        } else {
            await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${data.error}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–æ–≤');
    }
});

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
async function saveChatInfo(chatId, messageId) {
    try {
        const response = await fetch(NETLIFY_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                action: 'save_chat_info',
                chat_id: chatId,
                message_id: messageId
            })
        });
        return await response.json();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–∞:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID —á–∞—Ç–æ–≤
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    await saveChatInfo(chatId, messageId);
});

console.log('ü§ñ NFT Marketplace Bot –∑–∞–ø—É—â–µ–Ω...');
