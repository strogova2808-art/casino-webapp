const fetch = require('node-fetch');

// –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
const users = new Map();

exports.handler = async (event) => {
    console.log('üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', event.httpMethod, event.path);
    
    // CORS headers
    const headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
        'Access-Control-Allow-Methods': 'POST, GET, OPTIONS, PUT, DELETE',
        'Content-Type': 'application/json'
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–∞
    if (event.httpMethod === 'OPTIONS') {
        return {
            statusCode: 200,
            headers,
            body: ''
        };
    }

    try {
        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        let data = {};
        if (event.body) {
            data = JSON.parse(event.body);
        }
        
        console.log('üìä –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', data);

        const action = data.action;
        const userId = data.user_id || 'default';
        const botType = data.bot_type || 'main';

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!users.has(userId)) {
            users.set(userId, {
                user_id: userId,
                username: data.username || 'user_' + userId,
                first_name: data.first_name || '–ò–≥—Ä–æ–∫',
                balance: 666,
                games_played: 0,
                total_won: 0,
                biggest_win: 0,
                wins_count: 0,
                created_at: new Date().toISOString(),
                last_activity: new Date().toISOString()
            });
        }

        const user = users.get(userId);
        let result = { success: false, error: 'Unknown action' };

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
        switch (action) {
            case 'get_initial_data':
                result = {
                    success: true,
                    user_data: user,
                    game_history: [],
                    server: 'Netlify Functions',
                    timestamp: new Date().toISOString()
                };
                break;

            case 'update_balance':
                const newBalance = data.balance;
                if (newBalance !== undefined) {
                    user.balance = newBalance;
                    user.last_activity = new Date().toISOString();
                    
                    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
                    await sendToTelegram(
                        `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\nüë§ ${user.first_name}\nüí∞ ${newBalance} ‚≠ê\nü§ñ ${botType} –±–æ—Ç`,
                        botType
                    );
                    
                    result = { 
                        success: true, 
                        message: 'Balance updated',
                        user_data: user
                    };
                }
                break;

            case 'game_result':
                const { bet_amount, win, prize_name, prize_value, combination } = data;
                user.games_played++;
                
                if (win) {
                    user.wins_count++;
                    user.total_won += prize_value;
                    user.biggest_win = Math.max(user.biggest_win, prize_value);
                    
                    await sendToTelegram(
                        `üéâ –í–´–ò–ì–†–´–®!\nüë§ ${user.first_name}\nüèÜ ${prize_name}\nüí∞ ${prize_value} ‚≠ê\nüé∞ ${combination}\nü§ñ ${botType} –±–æ—Ç`,
                        botType
                    );
                } else {
                    await sendToTelegram(
                        `üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã\nüë§ ${user.first_name}\nüí∏ –°—Ç–∞–≤–∫–∞: ${bet_amount} ‚≠ê\n‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à\nü§ñ ${botType} –±–æ—Ç`,
                        botType
                    );
                }
                
                result = { success: true, message: 'Game recorded' };
                break;

            case 'deposit_request':
                const depositAmount = data.amount || 0;
                
                await sendToTelegram(
                    `üí∞ –ó–ê–ü–†–û–° –ù–ê –ü–û–ü–û–õ–ù–ï–ù–ò–ï\n\nüë§ ${user.first_name}\nüÜî ${userId}\nüìõ @${user.username || '–Ω–µ—Ç'}\nüíé ${depositAmount} ‚≠ê\nü§ñ ${botType} –±–æ—Ç\n\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n/addstars ${userId} ${depositAmount}`,
                    botType
                );
                
                result = { success: true, message: 'Deposit request sent' };
                break;

            case 'test_connection':
                await sendToTelegram(
                    `üîó –¢–µ—Å—Ç —Å–≤—è–∑–∏\nüë§ ${user.first_name}\nüÜî ${userId}\nü§ñ ${botType} –±–æ—Ç\n‚úÖ WebApp –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Netlify\n‚è∞ ${new Date().toISOString()}`,
                    botType
                );
                
                result = { 
                    success: true, 
                    message: 'Connection test successful',
                    server: 'Netlify Functions',
                    timestamp: new Date().toISOString(),
                    user_data: user
                };
                break;

            default:
                result = { success: false, error: 'Unknown action: ' + action };
        }

        console.log('üì§ –û—Ç–≤–µ—Ç:', result);
        return {
            statusCode: 200,
            headers,
            body: JSON.stringify(result)
        };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
        
        return {
            statusCode: 500,
            headers,
            body: JSON.stringify({
                success: false,
                error: error.message,
                timestamp: new Date().toISOString()
            })
        };
    }
};

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
async function sendToTelegram(message, botType = 'main') {
    try {
        const tokens = {
            'main': '8373706621:AAFTOCrsNuSuov9pBzj1C1xk7vvC3zo01Nk',
            'proxy': '7662090078:AAEGodkX0D982ZQplWqKHafGlucATOzzevc'
        };
        
        const adminId = 1376689155;
        const token = tokens[botType];
        
        if (!token) {
            console.log('‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω:', botType);
            return false;
        }

        console.log(`üì® –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram [${botType}]:`, message);
        
        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å:
        /*
        const url = `https://api.telegram.org/bot${token}/sendMessage`;
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: adminId,
                text: message,
                parse_mode: 'HTML'
            })
        });
        
        const result = await response.json();
        return result.ok;
        */
        
        return true; // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
        return false;
    }
}
