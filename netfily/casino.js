const Database = require('./database');
const TelegramBot = require('./telegram');

exports.handler = async (event) => {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS headers
    const headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
        'Access-Control-Allow-Methods': 'POST, GET, OPTIONS, PUT, DELETE',
        'Content-Type': 'application/json'
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–∞
    if (event.httpMethod === 'OPTIONS') {
        return {
            statusCode: 200,
            headers,
            body: ''
        };
    }

    try {
        const db = new Database();
        const telegram = new TelegramBot();

        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        const data = JSON.parse(event.body || '{}');
        console.log('üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', data);

        const action = data.action;
        const userId = data.user_id;
        const botType = data.bot_type || 'main';

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!userId) {
            return {
                statusCode: 400,
                headers,
                body: JSON.stringify({
                    success: false,
                    error: 'User ID required'
                })
            };
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let user = await db.getUser(userId);
        if (!user) {
            user = await db.createUser({
                user_id: userId,
                username: data.username || '',
                first_name: data.first_name || '–ò–≥—Ä–æ–∫'
            });
        }

        let result = { success: false, error: 'Unknown action' };

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        switch (action) {
            case 'get_initial_data':
                const gameHistory = await db.getGameHistory(userId, 10);
                result = {
                    success: true,
                    user_data: user,
                    game_history: gameHistory
                };
                break;

            case 'update_balance':
                const newBalance = data.balance;
                if (newBalance !== undefined) {
                    const updatedUser = await db.updateUser(userId, { balance: newBalance });
                    await telegram.notifyAdmin(
                        `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\nüë§ ${user.first_name}\nüí∞ ${newBalance} ‚≠ê\nü§ñ ${botType} –±–æ—Ç`,
                        botType
                    );
                    result = { 
                        success: true, 
                        message: 'Balance updated',
                        user_data: updatedUser
                    };
                } else {
                    result = { success: false, error: 'Balance not provided' };
                }
                break;

            case 'game_result':
                const { bet_amount, win, prize_name, prize_value, combination } = data;
                const gameRecorded = await db.addGameRecord(
                    userId, 
                    bet_amount, 
                    win, 
                    prize_name, 
                    prize_value, 
                    combination
                );
                
                if (gameRecorded) {
                    if (win) {
                        await telegram.notifyAdmin(
                            `üéâ –í–´–ò–ì–†–´–®!\nüë§ ${user.first_name}\nüèÜ ${prize_name}\nüí∞ ${prize_value} ‚≠ê\nüé∞ ${combination}\nü§ñ ${botType} –±–æ—Ç`,
                            botType
                        );
                    } else {
                        await telegram.notifyAdmin(
                            `üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã\nüë§ ${user.first_name}\nüí∏ –°—Ç–∞–≤–∫–∞: ${bet_amount} ‚≠ê\n‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à\nü§ñ ${botType} –±–æ—Ç`,
                            botType
                        );
                    }
                    result = { success: true, message: 'Game recorded' };
                } else {
                    result = { success: false, error: 'Failed to record game' };
                }
                break;

            case 'deposit_request':
                const depositAmount = data.amount || 0;
                const transactionAdded = await db.addTransaction(
                    userId, 
                    'deposit', 
                    depositAmount, 
                    '–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ'
                );
                
                if (transactionAdded) {
                    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                    await telegram.notifyAdmin(
                        `üí∞ –ó–ê–ü–†–û–° –ù–ê –ü–û–ü–û–õ–ù–ï–ù–ò–ï\n\nüë§ ${user.first_name}\nüÜî ${userId}\nüìõ @${user.username || '–Ω–µ—Ç'}\nüíé ${depositAmount} ‚≠ê\nü§ñ ${botType} –±–æ—Ç\n\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n/addstars ${userId} ${depositAmount}`,
                        botType
                    );
                    
                    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await telegram.notifyUser(
                        userId,
                        `‚úÖ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç!</b>\n\nüíé –°—É–º–º–∞: ${depositAmount} ‚≠ê\nüë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è`,
                        botType
                    );
                    
                    result = { success: true, message: 'Deposit request sent' };
                } else {
                    result = { success: false, error: 'Failed to add transaction' };
                }
                break;

            case 'withdraw_prize':
                const { prize, value } = data;
                const withdrawRecorded = await db.addTransaction(
                    userId, 
                    'withdraw', 
                    value, 
                    `–í—ã–≤–æ–¥ –ø—Ä–∏–∑–∞: ${prize}`
                );
                
                if (withdrawRecorded) {
                    await telegram.notifyAdmin(
                        `üéÅ –ó–ê–ü–†–û–° –ù–ê –í–´–í–û–î –ü–†–ò–ó–ê\n\nüë§ ${user.first_name}\nüÜî ${userId}\nüìõ @${user.username || '–Ω–µ—Ç'}\nüèÜ ${prize}\nüíé ${value} ‚≠ê\nü§ñ ${botType} –±–æ—Ç`,
                        botType
                    );
                    
                    await telegram.notifyUser(
                        userId,
                        `‚úÖ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–∏–∑–∞ –ø—Ä–∏–Ω—è—Ç!</b>\n\nüèÜ ${prize}\nüíé ${value} ‚≠ê\nüë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω`,
                        botType
                    );
                    
                    result = { success: true, message: 'Withdraw request sent' };
                } else {
                    result = { success: false, error: 'Failed to record withdraw' };
                }
                break;

            case 'test_connection':
                await telegram.notifyAdmin(
                    `üîó –¢–µ—Å—Ç —Å–≤—è–∑–∏\nüë§ ${user.first_name}\nüÜî ${userId}\nü§ñ ${botType} –±–æ—Ç\n‚úÖ WebApp –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Netlify`,
                    botType
                );
                result = { 
                    success: true, 
                    message: 'Connection test successful',
                    server: 'Netlify Functions',
                    timestamp: new Date().toISOString()
                };
                break;

            case 'get_game_history':
                const history = await db.getGameHistory(userId, data.limit || 10);
                result = {
                    success: true,
                    game_history: history
                };
                break;

            default:
                result = { success: false, error: 'Unknown action: ' + action };
        }

        console.log('üì§ –û—Ç–≤–µ—Ç:', result);
        return {
            statusCode: 200,
            headers,
            body: JSON.stringify(result)
        };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
        
        return {
            statusCode: 500,
            headers,
            body: JSON.stringify({
                success: false,
                error: error.message,
                stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
            })
        };
    }
};