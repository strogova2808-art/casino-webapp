
const fetch = require('node-fetch');

// In-memory database
const users = new Map();
const userMessages = new Map(); // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

// Telegram bot tokens
const BOT_TOKENS = {
    'main': '8373706621:AAFTOCrsNuSuov9pBzj1C1xk7vvC3zo01Nk',
    'proxy': '7662090078:AAEGodkX0D982ZQplWqKHafGlucATOzzevc',
    'admin_notifications': '7662090078:AAEGodkX0D982ZQplWqKHafGlucATOzzevc'
};

const ADMIN_CHAT_ID = 1376689155;

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
async function sendTelegramMessage(chatId, message, botToken = BOT_TOKENS.admin_notifications, parse_mode = 'HTML') {
    try {
        const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: chatId,
                text: message,
                parse_mode: parse_mode
            })
        });
        
        const result = await response.json();
        console.log('üì® –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', result.ok);
        return result.ok;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–æ–≤
async function clearUserChats(botToken) {
    try {
        console.log('üóëÔ∏è –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É —á–∞—Ç–æ–≤...');
        let clearedCount = 0;
        
        for (const [chatId, messageIds] of userMessages.entries()) {
            if (chatId != ADMIN_CHAT_ID) { // –ù–µ —Ç—Ä–æ–≥–∞–µ–º –∞–¥–º–∏–Ω–∞
                for (const messageId of messageIds) {
                    try {
                        const url = `https://api.telegram.org/bot${botToken}/deleteMessage`;
                        await fetch(url, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                chat_id: chatId,
                                message_id: messageId
                            })
                        });
                        clearedCount++;
                    } catch (error) {
                        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ ${chatId}`);
                    }
                }
                // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                userMessages.set(chatId, []);
            }
        }
        
        console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ ${clearedCount} —Å–æ–æ–±—â–µ–Ω–∏–π`);
        return clearedCount;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–æ–≤:', error);
        return 0;
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async function broadcastMessage(message, botToken) {
    try {
        console.log('üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π...');
        let sentCount = 0;
        let failedCount = 0;
        
        for (const [userId, userData] of users.entries()) {
            try {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π future –æ—á–∏—Å—Ç–∫–∏
                const messageSent = await sendTelegramMessage(
                    userId, 
                    `üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n${message}`,
                    botToken
                );
                
                if (messageSent) {
                    sentCount++;
                } else {
                    failedCount++;
                }
                
                // –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
                await new Promise(resolve => setTimeout(resolve, 100));
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
                failedCount++;
            }
        }
        
        console.log(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount}, –Ω–µ —É–¥–∞–ª–æ—Å—å ${failedCount}`);
        return { sent: sentCount, failed: failedCount };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
        return { sent: 0, failed: users.size };
    }
}

exports.handler = async (event, context) => {
    console.log('üéÅ NFT Marketplace Function called');
    
    // CORS headers
    const headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization, x-requested-with',
        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
        'Access-Control-Max-Age': '86400',
        'Content-Type': 'application/json'
    };

    // Handle OPTIONS preflight
    if (event.httpMethod === 'OPTIONS') {
        return { statusCode: 200, headers, body: '' };
    }

    // Handle GET requests
    if (event.httpMethod === 'GET') {
        return {
            statusCode: 200,
            headers,
            body: JSON.stringify({
                success: true,
                message: 'üéÅ NFT Marketplace API is working!',
                server: 'Netlify Functions',
                timestamp: new Date().toISOString(),
                total_users: users.size
            })
        };
    }

    // Handle POST requests
    if (event.httpMethod === 'POST') {
        try {
            const data = JSON.parse(event.body || '{}');
            console.log('üì• POST Request data:', data);

            const action = data.action;
            const userId = data.user_id || 'default';
            const botType = data.bot_type || 'main';
            const username = data.username || 'user_' + userId;
            const firstName = data.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
            if (userId && !userMessages.has(userId)) {
                userMessages.set(userId, []);
            }

            let result = { success: true };

            // Process actions
            switch (action) {

                case 'register_telegram_user':
                    console.log('üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data);
                    
                    if (!users.has(userId)) {
                        users.set(userId, {
                            user_id: userId,
                            username: username,
                            first_name: firstName,
                            last_name: data.last_name || '',
                            language_code: data.language_code || 'ru',
                            is_premium: data.is_premium || false,
                            photo_url: data.photo_url || '',
                            balance: data.balance || 500,
                            inventory: [],
                            transactions: [],
                            registered_at: data.registered_at || new Date().toISOString(),
                            last_activity: new Date().toISOString(),
                            is_telegram_user: true
                        });
                        
                        console.log(`‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${firstName}`);
                        
                        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                        await sendTelegramMessage(
                            ADMIN_CHAT_ID,
                            `üë§ <b>–ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨</b>\n\n` +
                            `üÜî <b>ID:</b> <code>${userId}</code>\n` +
                            `üë§ <b>–ò–º—è:</b> ${firstName}\n` +
                            `üìõ <b>Username:</b> @${username}\n` +
                            `üíé <b>–ë–∞–ª–∞–Ω—Å:</b> ${data.balance || 500} ‚≠ê\n` +
                            `üåê <b>–Ø–∑—ã–∫:</b> ${data.language_code || 'ru'}\n` +
                            `‚≠ê <b>Premium:</b> ${data.is_premium ? '–î–∞' : '–ù–µ—Ç'}\n` +
                            `ü§ñ <b>–ß–µ—Ä–µ–∑ –±–æ—Ç–∞:</b> ${botType}`,
                            BOT_TOKENS.admin_notifications
                        );
                    } else {
                        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        const user = users.get(userId);
                        user.last_activity = new Date().toISOString();
                        user.balance = data.balance || user.balance;
                    }
                    
                    result.user_data = users.get(userId);
                    break;

                case 'purchase_nft':
                    console.log('üõí –ü–æ–∫—É–ø–∫–∞ NFT:', data);
                    
                    if (!users.has(userId)) {
                        result.success = false;
                        result.error = 'User not found';
                        break;
                    }

                    const user = users.get(userId);
                    const transaction = {
                        id: data.transaction_id,
                        nft_id: data.nft_id,
                        nft_name: data.nft_name,
                        buyer: user.username,
                        recipient: data.recipient,
                        price: data.price,
                        timestamp: new Date().toISOString()
                    };

                    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if (!user.transactions) user.transactions = [];
                    user.transactions.push(transaction);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                    user.balance -= data.price;
                    user.last_activity = new Date().toISOString();

                    result.success = true;
                    result.transaction = transaction;
                    
                    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –ø–æ–∫—É–ø–∫–µ
                    await sendTelegramMessage(
                        ADMIN_CHAT_ID,
                        `üõí <b>–ù–û–í–ê–Ø –ü–û–ö–£–ü–ö–ê NFT</b>\n\n` +
                        `üéÅ <b>NFT:</b> ${data.nft_name}\n` +
                        `üë§ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> ${user.first_name}\n` +
                        `üìõ <b>Username:</b> @${user.username}\n` +
                        `üéØ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> ${data.recipient}\n` +
                        `üíé <b>–¶–µ–Ω–∞:</b> ${data.price} ‚≠ê\n` +
                        `üÜî <b>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> <code>${data.transaction_id}</code>\n` +
                        `ü§ñ <b>–ß–µ—Ä–µ–∑ –±–æ—Ç–∞:</b> ${botType}`,
                        BOT_TOKENS.admin_notifications
                    );
                    break;

                case 'deposit_request':
                    console.log('üí∞ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:', data);
                    
                    if (users.has(userId)) {
                        const depositUser = users.get(userId);
                        const oldBalance = depositUser.balance;
                        depositUser.balance += data.amount;
                        depositUser.last_activity = new Date().toISOString();
                        
                        result.user_data = depositUser;
                        result.deposit_amount = data.amount;
                        result.old_balance = oldBalance;
                        result.new_balance = depositUser.balance;
                        
                        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
                        await sendTelegramMessage(
                            ADMIN_CHAT_ID,
                            `üí∞ <b>–ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê</b>\n\n` +
                            `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${depositUser.first_name}\n` +
                            `üìõ <b>Username:</b> @${depositUser.username}\n` +
                            `üíé <b>–°—É–º–º–∞:</b> ${data.amount} ‚≠ê\n` +
                            `üìä <b>–ë—ã–ª–æ:</b> ${oldBalance} ‚≠ê\n` +
                            `üîÑ <b>–°—Ç–∞–ª–æ:</b> ${depositUser.balance} ‚≠ê\n` +
                            `ü§ñ <b>–ß–µ—Ä–µ–∑ –±–æ—Ç–∞:</b> ${botType}`,
                            BOT_TOKENS.admin_notifications
                        );
                    }
                    break;

                // –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´
                case 'list_users':
                    console.log('üìã –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç –∞–¥–º–∏–Ω–∞:', data.admin_id);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    if (data.admin_id != ADMIN_CHAT_ID) {
                        return {
                            statusCode: 403,
                            headers,
                            body: JSON.stringify({ 
                                success: false, 
                                error: 'Admin access required' 
                            })
                        };
                    }

                    try {
                        console.log(`üìä –¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø–∞–º—è—Ç–∏:`, Array.from(users.keys()));
                        
                        if (users.size === 0) {
                            result.users = {};
                            result.user_count = 0;
                            result.total_balance = 0;
                            result.message = '–í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π';
                        } else {
                            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Map –≤ –æ–±—ä–µ–∫—Ç
                            const usersArray = Array.from(users.entries()).reduce((acc, [id, userData]) => {
                                acc[id] = userData;
                                return acc;
                            }, {});
                            
                            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${Object.keys(usersArray).length}`);
                            
                            result.users = usersArray;
                            result.user_count = users.size;
                            result.total_balance = Array.from(users.values()).reduce((sum, user) => sum + (user.balance || 0), 0);
                            result.total_telegram_users = Array.from(users.values()).filter(user => user.is_telegram_user).length;
                            result.message = `–ù–∞–π–¥–µ–Ω–æ ${users.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`;
                        }
                        
                        result.timestamp = new Date().toISOString();
                        
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
                        result.success = false;
                        result.error = error.message;
                    }
                    break;

                case 'clear_chats':
                    console.log('üóëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É —á–∞—Ç–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∞:', data.admin_id);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    if (data.admin_id != ADMIN_CHAT_ID) {
                        return {
                            statusCode: 403,
                            headers,
                            body: JSON.stringify({ 
                                success: false, 
                                error: 'Admin access required' 
                            })
                        };
                    }

                    try {
                        const clearedCount = await clearUserChats(BOT_TOKENS[botType] || BOT_TOKENS.main);
                        
                        result.success = true;
                        result.cleared_count = clearedCount;
                        result.message = `–û—á–∏—â–µ–Ω–æ ${clearedCount} —Å–æ–æ–±—â–µ–Ω–∏–π`;
                        
                        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ–± –æ—á–∏—Å—Ç–∫–µ
                        await sendTelegramMessage(
                            ADMIN_CHAT_ID,
                            `üóëÔ∏è <b>–û–ß–ò–°–¢–ö–ê –ß–ê–¢–û–í –í–´–ü–û–õ–ù–ï–ù–ê</b>\n\n` +
                            `üìù <b>–û—á–∏—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> ${clearedCount}\n` +
                            `üë• <b>–ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —á–∞—Ç–æ–≤:</b> ${userMessages.size - 1}\n` +
                            `üïê <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString()}`,
                            BOT_TOKENS.admin_notifications
                        );
                        
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–æ–≤:', error);
                        result.success = false;
                        result.error = error.message;
                    }
                    break;

                case 'broadcast_message':
                    console.log('üì¢ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç –∞–¥–º–∏–Ω–∞:', data.admin_id);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    if (data.admin_id != ADMIN_CHAT_ID) {
                        return {
                            statusCode: 403,
                            headers,
                            body: JSON.stringify({ 
                                success: false, 
                                error: 'Admin access required' 
                            })
                        };
                    }

                    if (!data.message) {
                        result.success = false;
                        result.error = 'Message is required';
                    } else {
                        try {
                            const broadcastResult = await broadcastMessage(
                                data.message, 
                                BOT_TOKENS[botType] || BOT_TOKENS.main
                            );
                            
                            result.success = true;
                            result.broadcast_result = broadcastResult;
                            result.message = `–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${broadcastResult.sent} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ${broadcastResult.failed} –æ—à–∏–±–æ–∫`;
                            
                            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ —Ä–∞—Å—Å—ã–ª–∫–µ
                            await sendTelegramMessage(
                                ADMIN_CHAT_ID,
                                `üì¢ <b>–†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê</b>\n\n` +
                                `‚úÖ <b>–£—Å–ø–µ—à–Ω–æ:</b> ${broadcastResult.sent}\n` +
                                `‚ùå <b>–û—à–∏–±–æ–∫:</b> ${broadcastResult.failed}\n` +
                                `üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> ${users.size}\n` +
                                `üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${data.message.substring(0, 100)}...`,
                                BOT_TOKENS.admin_notifications
                            );
                            
                        } catch (error) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
                            result.success = false;
                            result.error = error.message;
                        }
                    }
                    break;

                case 'get_user_data':
                    if (users.has(userId)) {
                        result.user_data = users.get(userId);
                    } else {
                        result.success = false;
                        result.error = 'User not found';
                    }
                    break;

                default:
                    result.message = `Action '${action}' processed`;
            }

            console.log('üì§ Response:', result);
            return { statusCode: 200, headers, body: JSON.stringify(result) };

        } catch (error) {
            console.error('‚ùå Handler error:', error);
            
            return {
                statusCode: 200,
                headers,
                body: JSON.stringify({
                    success: false,
                    error: error.message,
                    timestamp: new Date().toISOString()
                })
            };
        }
    }

    return {
        statusCode: 405,
        headers,
        body: JSON.stringify({
            success: false,
            error: 'Method not allowed'
        })
    };
};

